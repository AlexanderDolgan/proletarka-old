{"version":3,"sources":["main.css","main.scss","base/_base.scss","util/_settings.scss","layout/_layout.scss","../../bower_components/susy/sass/susy/output/support/_rem.scss","layout/_susy.scss","../../bower_components/susy/sass/susy/language/susy/_container.scss","../../bower_components/susy/sass/susy/output/support/_clearfix.scss","../../bower_components/susy/sass/susy/language/susy/_background.scss","../../bower_components/susy/sass/susy/output/support/_background.scss","../../bower_components/normalize-scss/sass/normalize/_variables.scss","../../bower_components/susy/sass/susy/output/shared/_background.scss","../../bower_components/juice/dist/_juice.scss","modules/_ham-btn.scss","../../bower_components/breakpoint-sass/stylesheets/_breakpoint.scss","modules/_logo.scss","../../bower_components/susy/sass/susy/language/susy/_span.scss","../../bower_components/susy/sass/susy/output/shared/_direction.scss","../../bower_components/susy/sass/susy/language/susy/_gutters.scss","modules/_nav.scss","modules/_contacts.scss","modules/_cards.scss","../../bower_components/susy/sass/susy/language/susy/_isolate.scss","../../bower_components/susy/sass/susy/language/susy/_gallery.scss","../../bower_components/susy/sass/susy/language/susy/_rows.scss","../../bower_components/susy/sass/susy/output/float/_end.scss","modules/_form.scss","modules/_btn.scss","states/_is.scss"],"names":[],"mappings":"AAAA,iBAAiB;ACAjB,oEAAY;ACEZ;EACE,uBAAuB,EACxB;;AAED;EACE,gBCFqB;EDGrB,6BCLkC;EDMlC,iBCHsB;EDItB,0BCiBa;EDhBb,oCCJuB;EDKvB,eCaa;EDZb,UAAU;EACV,WAAW,EACZ;;AAED;EACE,YAAY;EACZ,aAAa,EACd;;AAED;EACE,sBAAsB;EACtB,eCbsB,EDoBvB;EATD;IAMI,eAAa;IACb,2BAA2B,EAC5B;;AAIH;EACE,mBAAmB,EACpB;;AAGD;EACE,iBCawB;EDZxB,qBCa6B,EDZ9B;;AAGD;;;;;;EAME,wCCK6C;EDJ7C,iBCKsB;EDJtB,eC5Ba;ED6Bb,iBCKqB,EDJtB;;AAGD;EACE,oBAAoB;EACpB,+BCjDsB;EDkDtB,mBAAmB;EACnB,oBAAoB;EACpB,wBAAsB,EAAO;;AAG/B;EACE,eCxDsB;EDyDtB,oBAAoB;EACpB,eAAe;EACf,mBAAmB;EACnB,qBAAqB;EACrB,uBAAuB,EACxB;;AAED;EACE,gBAAgB,EACjB;;AAGD;EACE,UAAU,EACX;;AElFD;ECmBI,gBCTmB;EDSnB,kBEqDoC;EFrDpC,mBEqDmE,EHtEtE;EAFD;IIYM,aAAa;IACb,eAAe;IACf,YAAY,EACb;ECiDQ;IAsDX,eAAe;IACf,gBAAgB;IAChB,YAAgB;IAChB,aAAgB;IAChB,aAAa;IACb,YAAY;IACZ,sCAAsB,EA5D4B;EACvC;IAmBX,eAAe;IACf,eAAe;IACf,kBAAkB;IAClB,wBACqB;IADrB,gBAEa;IAFb,kBAGe,EAzBsC;EAC1C;IAgCX,qCAAsB;IACtB,WAAW,EAjC+C;EAI1D;;IAEE,mBAAmB,EAKpB;IAPD;;MA8DA,mBAAmB;MACnB,OAAO;MACP,QAAQ;MACR,UAAU;MACV,SAAS;MACT,aAAa;MACb,aAAa;MC7HX,8KDiC0C;MCnB1C,qCCjBmB;MD+BnB,2CD8TgE;MChThE,yCDgTgE;MJpVhE,8BOEoC,EHuDnC;;ALxEL;EACE,mBAAmB;ECcjB,gBFqBU;EErBV,kBEqDoC;EFrDpC,mBEqDmE;EHjErE,gBS8EW;ET7EX,qDAAqB;EACrB,6BAA6B;EAC7B,kCAAkC,EACnC;EAPD;IIQM,aAAa;IACb,eAAe;IACf,YAAY,EACb;ECuDH;;IAEE,mBAAmB,EAKpB;IAPD;;MA8DA,mBAAmB;MACnB,OAAO;MACP,QAAQ;MACR,UAAU;MACV,SAAS;MACT,aAAa;MACb,aAAa;MC7HX,8KDiC0C;MCnB1C,qCCjBmB;MD+BnB,2CD8TgE;MChThE,yCDgTgE;MJpVhE,8BOEoC,EHuDnC;;AL/DL;EACE,kBAAkB,EACnB;;AAED;ECEI,gBFqBU;EErBV,kBEqDoC;EFrDpC,mBEqDmE,EHpDtE;EAHD;IILM,aAAa;IACb,eAAe;IACf,YAAY,EACb;ECuDH;;IAEE,mBAAmB,EAKpB;IAPD;;MA8DA,mBAAmB;MACnB,OAAO;MACP,QAAQ;MACR,UAAU;MACV,SAAS;MACT,aAAa;MACb,aAAa;MC7HX,8KDiC0C;MCnB1C,qCCjBmB;MD+BnB,2CD8TgE;MChThE,yCDgTgE;MJpVhE,8BOEoC,EHuDnC;EL3DL;IILM,aAAa;IACb,eAAe;IACf,YAAY,EACb;;AJOL;EACE,iBAAiB;ECJf,gBFqBU;EErBV,kBEqDoC;EFrDpC,mBEqDmE,EH/CtE;EAHD;IIVM,aAAa;IACb,eAAe;IACf,YAAY,EACb;ECuDH;;IAEE,mBAAmB,EAKpB;IAPD;;MA8DA,mBAAmB;MACnB,OAAO;MACP,QAAQ;MACR,UAAU;MACV,SAAS;MACT,aAAa;MACb,aAAa;MC7HX,8KDiC0C;MCnB1C,qCCjBmB;MD+BnB,2CD8TgE;MChThE,yCDgTgE;MJpVhE,8BOEoC,EHuDnC;;ALjDL;EACE,gBAAgB;EAChB,2CAA4B,EAC7B;;AAED;EACE,oBAAoB;EACpB,gBAAgB,EACjB;;AUnCD;EAEI,mBAAmB;EACnB,aAAa;EACb,cAAc;EACd,0BAA0B,EAC3B;;AC0DC;EDtDF;IACE,cAAc,EACf,EAAA;;AEZH;EXmBI,iBYwIoB;EZxIpB,YaA4D;EbA5D,uBc4DwB;EH7E1B,yCbU+B;EaT/B,iBHkFW,EGpEZ;EAjBD;IAKG,eAAe,EACf;EANH;IAQG,qBH6EU;IRlET,iBYwIoB;IZxIpB,YaA4D;IbA5D,uBc4DwB;Id5DxB,sBYwIoB,EDhJrB;EAXH;IXmBI,iBYwIoB;IZxIpB,YaA4D;IbA5D,uBc4DwB;Id5DxB,uBYwIoB;ID5IrB,iBAAiB,EACjB;;AIhBH;EACE,iBAAiB;EACjB,gBHyJsB;EGxJtB,iBAAiB,EA0BlB;EA7BD;IAKI,mBAAmB,EACpB;EANH;IAQI,aAAS;IACT,mBAAmB;IACnB,ejBCoB;IiBApB,gBAAgB;IAChB,iBAAiB,EAClB;EAbH;IAeI,eAAe;IACf,2BPqES;IOpET,0BAA0B;IAC1B,0BjBSW;IiBRX,ejBMW;IiBEX,gCAAgC,EACjC;IA5BH;MAqBM,0BjBVkB;MiBWlB,ejBKS;MiBJT,sBAAsB;MACtB,wBP6DO;MO5DP,kBAAkB,EACnB;;AAKL;EACE,mBAAmB,EAmBpB;EApBD;IAGI,mCjB9BsC;IiB+BtC,sBAAsB;IACtB,iBAAiB;IACjB,uBAAuB;IACvB,ejBjBiB;IiBkBjB,gBAAgB,EAWjB;IAnBH;MAYM,eAAa;MACb,2BAA2B;MAC3B,gBAAgB,EACjB;IAfL;MAiBM,iBAAiB,EAClB;;ACjDL;EhBmBI,iBYwIoB;EZxIpB,aaAuE;EbAvE,gBYkFoB;EInGtB,iBAAiB,EAIlB;EAND;IAII,elBqBW,EkBpBZ;;AAGH;EAEI,eAAe;EACf,oBAAoB;EACpB,mBAAmB,EACpB;;AALH;EAOI,YAAY;EACZ,sBAAsB;EACtB,iBRoES;EQnET,iBRmES;EQlET,uBRkES;EQjET,uDAAqB;EACrB,6BAA6B;EAC7B,4BAA4B,EAC7B;;AAfH;EAiBI,YAAY;EACZ,sBAAsB;EACtB,iBR0DS;EQzDT,iBRyDS;EQxDT,uBRwDS;EQvDT,yDAAqB;EACrB,6BAA6B,EAE9B;;AAzBH;EA2BI,YAAY;EACZ,sBAAsB;EACtB,iBRgDS;EQ/CT,aR+CS;EQ9CT,uBR8CS;EQ7CT,uDAAqB;EACrB,6BAA6B,EAE9B;;AAGH;EACE,mBAAmB;EACnB,iBAAiB;EACjB,wBAAwB;EACxB,uCAAwB,EAQzB;EAZD;IAMI,sBAAsB;IACtB,elB1CoB;IkB2CpB,kBAAkB;IAClB,eAAe;IACf,gBAAgB,EACjB;;ACzDH;EjBmBI,gBFqBU;EErBV,kBEqDoC;EFrDpC,mBEqDmE,EetEtE;EAFD;IdYM,aAAa;IACb,eAAe;IACf,YAAY,EACb;ECuDH;;IAEE,mBAAmB,EAKpB;IAPD;;MA8DA,mBAAmB;MACnB,OAAO;MACP,QAAQ;MACR,UAAU;MACV,SAAS;MACT,aAAa;MACb,aAAa;MC7HX,8KDiC0C;MCnB1C,qCCjBmB;MD+BnB,2CD8TgE;MChThE,yCDgTgE;MJpVhE,8BOEoC,EHuDnC;;AaxEL;EjBeI,YYwIoB;EZxIpB,YaA4D;EbA5D,eY+EqB;EZ/ErB,gBYkFoB;EK/FtB,mBAAmB;EACnB,iBAAiB;EACjB,wBHuE0B;EGtE1B,gCnBakB;EmBTlB,cAAc;EACd,0BnBQkB;EmBPlB,enBUa;EmBLb,gCAAgC,EACjC;EAjBD;IAOI,iBAAiB,EAClB;EARH;IAaI,0BnBUW;ImBTX,enBPoB,EmBQrB;;AAIH;EAME,mBAAmB;EACnB,cAAc;EACd,UAAU,EACX;EATD;IAEI,mBAAmB;IACnB,mCnBtBsC;ImBuBtC,eAAe,EAChB;;AAMH;EACE,mBAAmB;EACnB,SAAS;EACT,4BAAqB,EACtB;;AP0BG;EOvBF;IACE,kBAAkB;IjBvBlB,iBYwIoB;IZxIpB,YaA4D,EIyB7D;IAHD;MjBtBE,ekBwDiB;MlBxDjB,oBmBoD6B;MnBpD7B,YoBZ0B;MpBY1B,eqBgB+B,EFwD9B;IFlDH;MjBtBE,uBYwIoB;MZxIpB,oBmBoD6B;MnBpD7B,YoBJ0B,ED4EzB;EF9CH;IACE,UAAU,EACX,EAAA;;APiBC;EObF;IjBhCE,iBYwIoB;IZxIpB,YaA4D,EIkC7D;IAFD;MjBhCE,ekBwDiB;MlBxDjB,oBmBoD6B;MnBpD7B,YoBZ0B;MpBY1B,eqBgB+B,EFwD9B;IFxCH;MjBhCE,uBYwIoB;MZxIpB,oBmBoD6B;MnBpD7B,YoBJ0B,ED4EzB;IFxCH;MjBhCE,uBYwIoB;MZxIpB,oBmBoD6B;MnBpD7B,YoBJ0B,ED4EzB,EAAA;;AG1FL;EACE,aAAY,EACb;;AAED;EACE,aAAa;EACb,0BxBekB;EwBdlB,iCxBGsB;EwBFtB,0BAAyB;EACzB,eAAe,EAIhB;EATD;IAOI,0BxBeW,EwBdZ;;AAGH;EACE,mBAAmB;EACnB,0BxBIkB;EwBHlB,iCxBRsB;EwBStB,0BAAyB;EACzB,eAAe,EAIhB;EATD;IAOI,0BxBIW,EwBHZ;;AAGH;EACE,cAAc,EACf;;AAGD;EACE,mBAAmB,EAuBpB;EAxBD;IAGI,YAAY,EACb;EAJH;IAMI,eAAe;IACf,YAAY,EACb;EARH;IAUI,eAAe;IACf,eAAe;IACf,iBV+GoB,EU9GrB;EAbH;IAeI,eAAe;IACf,eAAe;IACf,iBV0GoB;IUzGpB,iBAAiB,EAClB;EAnBH;IAqBI,eAAe;IACf,iBAAiB,EAClB;;ACvDH;EACE,aAAa,EAEd;;AAED;EACE,kBAAkB;EAClB,0BzBIsB;EyBHtB,eAAe;EACf,ezBkBa,EyBjBd;;ACTD;EACE,cAAc,EACf;;AAED;EACE,eAAe,EAChB;;AAKD;EACE,0B1Bca,E0Bbd;;AAED;EACE,0B1BKkB,E0BJnB;;AAED;EACE,0B1BKkB,E0BJnB;;AAED;EACE,wBAAsB,EACvB;;AAED;EACE,iDAAqB,EACtB;;AAED;EACE,0B1BZmB,E0BapB;;AAED;EACE,0B1B1BsB,E0B2BvB;;AAED;EACE,0B1B9BsB,E0B+BvB;;AAED;EACE,cAAc,EACf;;AAGD;EACE,iBAAiB,EAClB;;AAED;EACE,e1B3Ba,E0B4Bd;;AAED;EACE,mBAAmB,EACpB;;AdKG;EcAF;IACE,sCAAsB,EACvB;EAED;IACE,wHAAiC,EAElC,EAAA","file":"main.min.css","sourcesContent":["@charset \"UTF-8\";\n@import url(\"https://fonts.googleapis.com/css?family=Merriweather\");\n*, * + *, *::before, *::after {\n  box-sizing: border-box; }\n\nbody {\n  font-size: 16px;\n  font-family: \"Roboto\", serif;\n  line-height: 1.7;\n  background-color: #fefefe;\n  -webkit-font-smoothing: antialiased;\n  color: #4A4A4A;\n  margin: 0;\n  padding: 0; }\n\nimg {\n  width: 100%;\n  height: auto; }\n\na {\n  text-decoration: none;\n  color: #CC3333; }\n  a:hover, a:active, a:focus {\n    color: #8f2424;\n    text-decoration: underline; }\n\naddress {\n  font-style: normal; }\n\np {\n  line-height: 1.7;\n  margin-bottom: 1.5em; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: \"Merriweather\", sans-serif;\n  font-weight: 400;\n  color: #4A4A4A;\n  line-height: 1.4; }\n\nblockquote {\n  background: #f9f9f9;\n  border-left: 3px solid #CC3333;\n  margin: 1.5em 10px;\n  padding: 0.5em 10px;\n  quotes: \"“\" \"”\" \"‘\" \"’\"; }\n\nblockquote:before {\n  color: #CC3333;\n  content: open-quote;\n  font-size: 3em;\n  line-height: 0.1em;\n  margin-right: 0.25em;\n  vertical-align: -0.4em; }\n\nblockquote p {\n  display: inline; }\n\ndd {\n  margin: 0; }\n\n.wrapper {\n  max-width: 75em;\n  margin-left: auto;\n  margin-right: auto; }\n  .wrapper:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n  head {\n    display: block;\n    position: fixed;\n    right: 10px;\n    bottom: 10px;\n    z-index: 999;\n    color: #333;\n    background: rgba(255, 255, 255, 0.25); }\n  head:before {\n    content: \"|||\";\n    display: block;\n    padding: 5px 10px;\n    font-family: sans-serif;\n    font-size: 16px;\n    font-weight: bold; }\n  head:hover {\n    background: rgba(255, 255, 255, 0.5);\n    color: red; }\n  head:hover ~ .wrapper,\n  head:hover ~ body .wrapper {\n    position: relative; }\n    head:hover ~ .wrapper:before,\n    head:hover ~ body .wrapper:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      content: \" \";\n      z-index: 998;\n      background-image: linear-gradient(to right, rgba(102, 102, 255, 0.15), rgba(179, 179, 255, 0.15) 80%, transparent 80%), linear-gradient(to bottom, #000 1px, transparent 1px);\n      background-size: 8.47458%, 100% 24px;\n      background-origin: content-box, border-box;\n      background-clip: content-box, border-box;\n      background-position: left top; }\n\n#site-header {\n  position: relative;\n  max-width: 64em;\n  margin-left: auto;\n  margin-right: auto;\n  height: 42.5rem;\n  background-image: url(\"../img/assets/header-bg.jpg\");\n  background-repeat: no-repeat;\n  background-position: bottom right; }\n  #site-header:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n  head:hover ~ #site-header,\n  head:hover ~ body #site-header {\n    position: relative; }\n    head:hover ~ #site-header:before,\n    head:hover ~ body #site-header:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      content: \" \";\n      z-index: 998;\n      background-image: linear-gradient(to right, rgba(102, 102, 255, 0.15), rgba(179, 179, 255, 0.15) 80%, transparent 80%), linear-gradient(to bottom, #000 1px, transparent 1px);\n      background-size: 8.47458%, 100% 24px;\n      background-origin: content-box, border-box;\n      background-clip: content-box, border-box;\n      background-position: left top; }\n\n#site-footer {\n  padding: 2.5rem 0; }\n\n.container {\n  max-width: 64em;\n  margin-left: auto;\n  margin-right: auto; }\n  .container:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n  head:hover ~ .container,\n  head:hover ~ body .container {\n    position: relative; }\n    head:hover ~ .container:before,\n    head:hover ~ body .container:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      content: \" \";\n      z-index: 998;\n      background-image: linear-gradient(to right, rgba(102, 102, 255, 0.15), rgba(179, 179, 255, 0.15) 80%, transparent 80%), linear-gradient(to bottom, #000 1px, transparent 1px);\n      background-size: 8.47458%, 100% 24px;\n      background-origin: content-box, border-box;\n      background-clip: content-box, border-box;\n      background-position: left top; }\n  .container:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n\n.l-card-holder {\n  margin: 2.5rem 0;\n  max-width: 64em;\n  margin-left: auto;\n  margin-right: auto; }\n  .l-card-holder:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n  head:hover ~ .l-card-holder,\n  head:hover ~ body .l-card-holder {\n    position: relative; }\n    head:hover ~ .l-card-holder:before,\n    head:hover ~ body .l-card-holder:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      content: \" \";\n      z-index: 998;\n      background-image: linear-gradient(to right, rgba(102, 102, 255, 0.15), rgba(179, 179, 255, 0.15) 80%, transparent 80%), linear-gradient(to bottom, #000 1px, transparent 1px);\n      background-size: 8.47458%, 100% 24px;\n      background-origin: content-box, border-box;\n      background-clip: content-box, border-box;\n      background-position: left top; }\n\n.l-fidback {\n  padding: 5rem 0;\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4); }\n\n.l-footer {\n  text-align: justify;\n  font-size: .8em; }\n\n.ham-btn > button {\n  padding: 1em .75em;\n  border: none;\n  outline: none;\n  background-color: inherit; }\n\n@media (min-width: 48em) {\n  .ham-btn {\n    display: none; } }\n\n.logo {\n  width: 40.67797%;\n  float: left;\n  margin-right: 1.69492%;\n  background-color: rgba(204, 51, 51, 0.9);\n  height: 16.25rem; }\n  .logo img {\n    margin: 0 auto; }\n  .logo .main-logo {\n    margin-top: 5.625rem;\n    width: 83.05085%;\n    float: left;\n    margin-right: 1.69492%;\n    margin-left: 8.47458%; }\n  .logo .sub-logo {\n    width: 66.10169%;\n    float: left;\n    margin-right: 1.69492%;\n    margin-left: 16.94915%;\n    margin-top: 2rem; }\n\n.header-nav {\n  list-style: none;\n  width: 27.9661%;\n  margin-top: 2rem; }\n  .header-nav li {\n    position: relative; }\n  .header-nav li::before {\n    content: \"•\";\n    position: absolute;\n    color: #CC3333;\n    font-size: 2rem;\n    line-height: 1.4; }\n  .header-nav li a {\n    display: block;\n    padding: 0.5625rem 1.25rem;\n    text-transform: uppercase;\n    background-color: #fefefe;\n    color: #4A4A4A;\n    transition: all .2s ease-in-out; }\n    .header-nav li a:hover {\n      background-color: #CC3333;\n      color: #fefefe;\n      text-decoration: none;\n      padding-left: 1.5625rem;\n      font-weight: bold; }\n\n.hor-nav {\n  text-align: center; }\n  .hor-nav__link {\n    font-family: \"Merriweather\", serif;\n    display: inline-block;\n    font-weight: 700;\n    padding: 2em 1em 0 2em;\n    color: #FCFAED;\n    font-size: .9em; }\n    .hor-nav__link:hover, .hor-nav__link:active, .hor-nav__link:focus {\n      color: #faf6e0;\n      text-decoration: underline;\n      cursor: pointer; }\n    .hor-nav__link:last-child {\n      padding-right: 0; }\n\n.contacts {\n  width: 57.62712%;\n  float: right;\n  margin-right: 0;\n  margin-top: 5rem; }\n  .contacts a {\n    color: #4A4A4A; }\n\n.top-contacts a {\n  line-height: 3;\n  padding-right: 1rem;\n  padding-left: 2rem; }\n\n.top-contacts .phone::before {\n  content: \"\";\n  display: inline-block;\n  width: 0.8125rem;\n  height: 0.625rem;\n  margin-right: 0.625rem;\n  background-image: url(\"../img/assets/icons/phone.svg\");\n  background-repeat: no-repeat;\n  background-position: 0 -1px; }\n\n.top-contacts .email::before {\n  content: \"\";\n  display: inline-block;\n  width: 0.8125rem;\n  height: 0.625rem;\n  margin-right: 0.625rem;\n  background-image: url(\"../img/assets/icons/envelop.svg\");\n  background-repeat: no-repeat; }\n\n.top-contacts .address::before {\n  content: \"\";\n  display: inline-block;\n  width: 0.8125rem;\n  height: 1rem;\n  margin-right: 0.625rem;\n  background-image: url(\"../img/assets/icons/point.svg\");\n  background-repeat: no-repeat; }\n\n.hor-contacts {\n  text-align: center;\n  line-height: 3.5;\n  background-color: white;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5); }\n  .hor-contacts a {\n    display: inline-block;\n    color: #CC3333;\n    font-weight: bold;\n    padding: 0 2em;\n    font-size: .9em; }\n\n.container {\n  max-width: 64em;\n  margin-left: auto;\n  margin-right: auto; }\n  .container:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n  head:hover ~ .container,\n  head:hover ~ body .container {\n    position: relative; }\n    head:hover ~ .container:before,\n    head:hover ~ body .container:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      content: \" \";\n      z-index: 998;\n      background-image: linear-gradient(to right, rgba(102, 102, 255, 0.15), rgba(179, 179, 255, 0.15) 80%, transparent 80%), linear-gradient(to bottom, #000 1px, transparent 1px);\n      background-size: 8.47458%, 100% 24px;\n      background-origin: content-box, border-box;\n      background-clip: content-box, border-box;\n      background-position: left top; }\n\n.cat-card {\n  width: 100%;\n  float: left;\n  margin-left: 0;\n  margin-right: 0;\n  position: relative;\n  overflow: hidden;\n  margin-bottom: 1.69492%;\n  border: solid 0.3125rem #e6e6e6;\n  height: 10rem;\n  background-color: #e6e6e6;\n  color: #4A4A4A;\n  transition: all .2s ease-in-out; }\n  .cat-card:last-child {\n    margin-bottom: 0; }\n  .cat-card:hover {\n    background-color: #fefefe;\n    color: #CC3333; }\n\n.cat-card__text {\n  position: absolute;\n  margin: 0 2em;\n  top: 1rem; }\n  .cat-card__text p:first-child {\n    font-size: 1.75rem;\n    font-family: \"Merriweather\", serif;\n    margin: 0 auto; }\n\n.cat-card__img {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%); }\n\n@media (min-width: 48em) {\n  .cat-card {\n    height: 21.875rem;\n    width: 49.15254%;\n    float: left; }\n    .cat-card:nth-child(2n + 1) {\n      margin-left: 0;\n      margin-right: -100%;\n      clear: both;\n      margin-left: 0; }\n    .cat-card:nth-child(2n + 2) {\n      margin-left: 50.84746%;\n      margin-right: -100%;\n      clear: none; }\n  .cat-card__text {\n    top: 7rem; } }\n\n@media (min-width: 64em) {\n  .cat-card {\n    width: 32.20339%;\n    float: left; }\n    .cat-card:nth-child(3n + 1) {\n      margin-left: 0;\n      margin-right: -100%;\n      clear: both;\n      margin-left: 0; }\n    .cat-card:nth-child(3n + 2) {\n      margin-left: 33.89831%;\n      margin-right: -100%;\n      clear: none; }\n    .cat-card:nth-child(3n + 3) {\n      margin-left: 67.79661%;\n      margin-right: -100%;\n      clear: none; } }\n\nfieldset {\n  border: none; }\n\ninput {\n  padding: 1em;\n  border: 1px solid #e6e6e6;\n  border-bottom: 1px solid #CC3333;\n  background-color: #f8f8f8;\n  font-size: 1em; }\n  input:active, input:focus {\n    background-color: #fefefe; }\n\ntextarea {\n  padding: 10px 15px;\n  border: 1px solid #e6e6e6;\n  border-bottom: 1px solid #CC3333;\n  background-color: #f8f8f8;\n  font-size: 1em; }\n  textarea:active, textarea:focus {\n    background-color: #fefefe; }\n\nbutton {\n  outline: none; }\n\n.feedback-form {\n  text-align: center; }\n  .feedback-form__legend {\n    margin: 1em; }\n  .feedback-form__label {\n    display: block;\n    margin: 1em; }\n  .feedback-form__input {\n    display: block;\n    margin: 0 auto;\n    width: 32.20339%; }\n  .feedback-form__textarea {\n    display: block;\n    margin: 0 auto;\n    width: 32.20339%;\n    min-height: 75px; }\n  .feedback-form__send-btn {\n    display: block;\n    margin: 1em auto; }\n\nbutton {\n  border: none; }\n\n.btn {\n  padding: .5em 1em;\n  background-color: #CC3333;\n  font-size: 1em;\n  color: #fefefe; }\n\n.is-hide {\n  display: none; }\n\n.is-show {\n  display: block; }\n\n.is-white-bg {\n  background-color: #fefefe; }\n\n.is-light-gray-bg {\n  background-color: #e6e6e6; }\n\n.is-black-bg {\n  background-color: #1f1f1f; }\n\n.is-black-trans {\n  background-color: black; }\n\n.is-dust {\n  background-image: url(\"../img/assets/noise.png\"); }\n\n.is-light {\n  background-color: #FCFAED; }\n\n.is-dark {\n  background-color: #CC3333; }\n\n.is-dark-grad {\n  background-color: #CC3333; }\n\n.is-hide {\n  display: none; }\n\n.is-accent {\n  font-weight: 700; }\n\n.is-text-white {\n  color: #fefefe; }\n\n.is-text-center {\n  text-align: center; }\n\n@media (min-width: 48em) {\n  .is-black-trans {\n    background-color: rgba(0, 0, 0, 0.65); }\n  .is-dark-grad {\n    background-image: linear-gradient(-45deg, #fcfaed 0%, #fcfaed 10%, #bf392a 10%, #bf392a 90%, #fcfaed 90%, #fcfaed 100%); } }","@import url('https://fonts.googleapis.com/css?family=Merriweather');\n\n@import \"../../bower_components/normalize-scss/sass/normalize\";\n\n@import \"../../bower_components/juice/dist/juice\";\n\n//settings-var\n@import \"util/settings\";\n\n//base\n@import \"base/base\";\n\n//layout\n//susy and breakpoints\n@import \"layout/index\";\n\n//modules\n@import \"modules/index\";\n\n//states\n@import \"states/index\";\n\n","//@include normalize();\n\n*, *+*, *::before, *::after {\n  box-sizing: border-box;\n}\n\nbody {\n  font-size: $global-font-size;\n  font-family: $global-font-family;\n  line-height: $global-line-height;\n  background-color: $body-background;\n  -webkit-font-smoothing: $font-smooth;\n  color: $black;\n  margin: 0;\n  padding: 0;\n}\n\nimg {\n  width: 100%;\n  height: auto;\n}\n\na {\n  text-decoration: none;\n  color: $primary-color;\n  &:hover,\n  &:active,\n  &:focus {\n    color: darken($primary-color, 15%);\n    text-decoration: underline;\n  }\n}\n\n//Address\naddress {\n  font-style: normal;\n}\n\n// Paragraphs\np {\n  line-height: $paragraph-lineheight;\n  margin-bottom: $paragraph-margin-bottom;\n}\n\n// Headings\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: $header-font-family;\n  font-weight: $header-font-weight;\n  color: $header-color;\n  line-height: $header-lineheight;\n}\n\n//Bloquote\nblockquote {\n  background: #f9f9f9;\n  border-left: 3px solid $primary-color;\n  margin: 1.5em 10px;\n  padding: 0.5em 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n}\n\nblockquote:before {\n  color: $primary-color;\n  content: open-quote;\n  font-size: 3em;\n  line-height: 0.1em;\n  margin-right: 0.25em;\n  vertical-align: -0.4em;\n}\n\nblockquote p {\n  display: inline;\n}\n//end Bloquote\n\ndd {\n  margin: 0;\n}\n\n\n","@import \"mixin\";\n\n//Global\n$global-font-family: 'Roboto', serif;\n$second-font-family: 'Merriweather', serif;\n$global-font-size: 16px;\n$global-line-height: 1.7;\n$font-smooth: antialiased;\n\n//Colors\n$brand-palette: (\n        primary: #CC3333,\n        primary-transparent: rgba(204,51,51,.9),\n        secondary: #683531,\n        success: #3ADB76,\n        warning: #FFAE00,\n        alert: #EC5840\n);\n\n$third-color: #cc3333; // light red\n$fourth-color: #F7E8C3; //bege\n$fifth-color: #FCFAED; ///light bege\n$light-gray: #e6e6e6;\n$medium-gray: #cacaca;\n$dark-gray: #8a8a8a;\n$black: #4A4A4A;\n$dark-black: #1f1f1f;\n$white: #fefefe;\n\n$body-background: $white;\n$body-font-color: $black;\n\n@include add-brand-colors;\n\n$base-spacing: 1em;\n\n// Media q breakpoints\n\n$b-small: 0;\n$b-medium: 48em;\n$b-large: 64em;\n$b-xlarge: 90em;\n$b-xxlarge: 100em;\n\n$b-small-only: 0 47.9375em;\n$b-medium-only: 48em 74, 9375em;\n$b-large-only: 75em 99, 9375em;\n\n//container width\n$container-width: $b-large;\n\n//Typography\n\n$paragraph-lineheight: 1.7;\n$paragraph-margin-bottom: 1.5em;\n\n$header-font-family: 'Merriweather', sans-serif;\n$header-font-weight: 400;\n$header-color: $body-font-color;\n$header-lineheight: 1.4;\n\n$header-sizes: (\n        small: (\n                'h1': 24,\n                'h2': 20,\n                'h3': 19,\n                'h4': 18,\n                'h5': 17,\n                'h6': 16,\n        ),\n        medium: (\n                'h1': 48,\n                'h2': 40,\n                'h3': 31,\n                'h4': 25,\n                'h5': 20,\n                'h6': 16,\n        ),\n)\n",".wrapper {\n  @include container();\n}\n\n#site-header {\n  position: relative;\n  @include container($container-width);\n  height: rem-calc(680px);\n  background-image: url(\"../img/assets/header-bg.jpg\");\n  background-repeat: no-repeat;\n  background-position: bottom right;\n}\n\n#site-footer {\n  padding: 2.5rem 0;\n}\n\n.container {\n  @include container($container-width);\n  @include susy-clearfix;\n}\n\n.l-card-holder {\n  margin: 2.5rem 0;\n  @include container($container-width);\n}\n\n.l-fidback {\n  padding: 5rem 0;\n  box-shadow: 2px 2px 5px rgba(0,0,0,.4);\n}\n\n.l-footer {\n  text-align: justify;\n  font-size: .8em;\n}","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","//import breakpoint\n@import \"../../../bower_components/breakpoint-sass/stylesheets/breakpoint\";\n//import susy\n@import \"../../../bower_components/susy/sass/susy\";\n\n$susy: (\n        flow: ltr,\n        math: fluid,\n        output: float,\n        gutter-position: after,\n        container: 75em,\n        container-position: center,\n        columns: 12,\n        gutters: 0.25,\n        column-width: false,\n        global-box-sizing: border-box,\n        last-flow: to,\n        debug: (\n                image: show,\n                color: rgba(#66f, .15),\n                output: overlay,\n                toggle: right bottom,\n        ),\n        use-custom: (\n                background-image: false,\n                background-options: false,\n                box-sizing: true,\n                clearfix: false,\n                rem: true,\n        )\n);","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Background Grid Syntax\n// ======================\n\n$susy-overlay-grid-head-exists: false;\n\n\n// Show Grid/s\n// -----------\n// Show grid on any element using either background or overlay.\n// - [$grid]  : <settings>\n@mixin show-grid(\n  $grid: $susy\n) {\n  $inspect: $grid;\n  $_output: debug-get(output, $grid);\n\n  @include susy-inspect(show-grid, $inspect);\n  @if $_output == overlay and susy-get(debug image, $grid) != hide {\n    @include overlay-grid($grid);\n  } @else {\n    @include background-grid($grid);\n  }\n}\n\n@mixin show-grids(\n  $grid: $susy\n) {\n  @include show-grid($grid);\n}\n\n// Background Grid\n// ---------------\n// Show a grid background on any element.\n// - [$grid]  : <settings>\n@mixin background-grid(\n  $grid: $susy\n) {\n  $inspect  : $grid;\n  $_output  : get-background($grid);\n\n  @if length($_output) > 0 {\n    $_flow: susy-get(flow, $grid);\n\n    $_image: ();\n    @each $name, $layer in map-get($_output, image) {\n      $_direction: if($name == baseline, to bottom, to to($_flow));\n      $_image: append($_image, linear-gradient($_direction, $layer), comma);\n    }\n    $_output: map-merge($_output, (image: $_image));\n\n    @include background-grid-output($_output...);\n    @include susy-inspect(background-grid, $inspect);\n  }\n}\n\n\n// Overlay Grid\n// ------------\n// Generate an icon to trigger grid-overlays on any given elements.\n// $grids...  : <selector> [<settings>] [, <selector>]*\n@mixin overlay-grid (\n  $grid: $susy\n) {\n  @if not($susy-overlay-grid-head-exists) {\n    @at-root head { @include overlay-head($grid); }\n    @at-root head:before { @include overlay-trigger; }\n    @at-root head:hover { @include overlay-trigger-hover; }\n    $susy-overlay-grid-head-exists: true !global;\n  }\n\n  head:hover ~ &,\n  head:hover ~ body & {\n    position: relative;\n    &:before {\n      @include grid-overlay-base;\n      @include background-grid($grid);\n    }\n  }\n}\n\n\n// [Private] Overlay Trigger\n// -------------------------\n@mixin overlay-trigger {\n  content: \"|||\";\n  display: block;\n  padding: 5px 10px;\n  font: {\n    family: sans-serif;\n    size: 16px;\n    weight: bold;\n  }\n}\n\n\n// [Private] Overlay Trigger Hover\n// -------------------------------\n@mixin overlay-trigger-hover {\n  background: rgba(white, .5);\n  color: red;\n}\n\n\n// [Private] Overlay Head\n// ----------------------\n// <head> styles to create grid overlay toggle\n@mixin overlay-head (\n  $grid: $susy\n) {\n  $_toggle: debug-get(toggle, $grid);\n  $_horz: null;\n  $_vert: null;\n\n  @each $side in $_toggle {\n    $_horz: if($side == left or $side == right, $side, $_horz);\n    $_vert: if($side == top or $side == bottom, $side, $_vert);\n  }\n\n  display: block;\n  position: fixed;\n  #{$_horz}: 10px;\n  #{$_vert}: 10px;\n  z-index: 999;\n  color: #333;\n  background: rgba(white, .25);\n}\n\n\n// [Private] Grid Overlay Base\n// ---------------------------\n// Base styles for generating a grid overlay\n@mixin grid-overlay-base() {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  content: \" \";\n  z-index: 998;\n}\n\n\n// Get Symmetrical Background\n// --------------------------\n// - $grid: <map>\n@function get-background-sym(\n  $grid\n) {\n  $grid           : parse-grid($grid);\n  $_gutters       : susy-get(gutters, $grid);\n  $_column-width  : susy-get(column-width, $grid);\n  $_math          : susy-get(math, $grid);\n\n  $_color         : debug-get(color);\n  $_trans         : transparent;\n  $_light         : lighten($_color, 15%);\n\n  $_end           : 1 + $_gutters;\n  $_after         : percentage(1/$_end);\n  $_stops         : ();\n  $_size          : span(1 $grid wide);\n\n  @if is-inside($grid) {\n    $_stops: $_color, $_light;\n  } @else if is-split($grid) {\n    $_split: $_gutters/2;\n    $_before: percentage($_split/$_end);\n    $_after: percentage((1 + $_split)/$_end);\n    $_stops: $_trans $_before, $_color $_before, $_light $_after, $_trans $_after;\n  } @else {\n    $_stops: $_color, $_light $_after, $_trans $_after;\n  }\n\n  @if $_math == static {\n    $_size: valid-column-math($_math, $_column-width) * $_end;\n  }\n\n  $_output: (\n    image: (columns: $_stops),\n    size: $_size,\n  );\n\n  @return $_output;\n}\n\n\n// Get Asymmetrical Inside\n// -----------------------\n// - $grid: <settings>\n@function get-asym-inside(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    @if $location == 1 {\n      $this-stop: append($this-stop, $_color, comma);\n    } @else {\n      $start: parse-span(1 at $location $grid);\n      $start: get-isolation($start);\n      $this-stop: append($this-stop, $_color $start, comma);\n    }\n\n    @if $location == susy-count($_columns) {\n      $this-stop: append($this-stop, $_light, comma);\n    } @else {\n      $_end: parse-span(1 at ($location + 1) $grid);\n      $_end: get-isolation($_end);\n      $this-stop: append($this-stop, $_light $_end, comma);\n    }\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Split\n// ----------------------\n// - $grid: <settings>\n@function get-asym-split(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    $start: parse-span(1 at $location $grid);\n    $start: get-isolation($start);\n    $this-stop: append($this-stop, transparent $start, comma);\n    $this-stop: append($this-stop, $_color $start, comma);\n\n    $_end: $start + span(1 at $location $grid);\n    $this-stop: append($this-stop, $_light $_end, comma);\n    $this-stop: append($this-stop, transparent $_end, comma);\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Outside\n// ------------------------\n// - $grid: <settings>\n@function get-asym-outside(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_trans   : transparent;\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    @if $location == 1 {\n      $this-stop: append($this-stop, $_color, comma);\n    } @else {\n      $start: parse-span(1 at $location $grid);\n      $start: get-isolation($start);\n      $this-stop: append($this-stop, $_color $start, comma);\n    }\n\n    @if $location == susy-count($_columns) {\n      $this-stop: append($this-stop, $_light, comma);\n    } @else {\n      $gutter: get-span-width(first $location $grid);\n\n      $_end: parse-span(1 at ($location + 1) $grid);\n      $_end: get-isolation($_end);\n\n      $gutter: $_light $gutter, $_trans $gutter, $_trans $_end;\n      $this-stop: join($this-stop, $gutter, comma);\n    }\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Background\n// ---------------------------\n// - $grid: <settings>\n@function get-background-asym(\n  $grid\n) {\n  $_stops: ();\n\n  @if is-inside($grid) {\n    $_stops: get-asym-inside($grid);\n  } @else if is-split($grid) {\n    $_stops: get-asym-split($grid);\n  } @else {\n    $_stops: get-asym-outside($grid);\n  }\n\n  @return (image: (columns: $_stops));\n}\n\n\n// Get Background\n// --------------\n// - $grid: <settings>\n@function get-background(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_show    : susy-get(debug image, $grid);\n  $_return  : ();\n\n  @if $_show and $_show != 'hide' {\n    $_columns: susy-get(columns, $grid);\n\n    @if $_show != 'show-baseline' {\n      $_sym: is-symmetrical($_columns);\n      $_return: if($_sym, get-background-sym($grid), get-background-asym($grid));\n      $_return: map-merge($_return, (clip: content-box));\n    }\n\n    @if $_show != 'show-columns'\n      and global-variable-exists(base-line-height)\n      and type-of($base-line-height) == 'number'\n      and not unitless($base-line-height) {\n      $_color: variable-exists('grid-background-baseline-color');\n      $_color: if($_color, $grid-background-baseline-color, #000);\n\n      $_image: map-get($_return, image);\n      $_size: map-get($_return, size);\n      $_baseline: (baseline: ($_color 1px, transparent 1px));\n      $_baseline-size: 100% $base-line-height;\n\n      $_return: map-merge($_return, (\n        image: if($_image, map-merge($_image, $_baseline), $_baseline),\n        size: if($_size, ($_size, $_baseline-size), $_baseline-size),\n      ));\n\n      @if $_show == 'show' {\n        $_clip: map-get($_return, clip);\n        $_return: map-merge($_return, (clip: join($_clip, border-box, comma)));\n      }\n    } @else if $_show == 'show-baseline' {\n      @warn 'Please provide a $base-line-height with the desired height and units';\n    }\n  }\n\n  @if map-get($_return, image) {\n    $_return: map-merge($_return, (flow: susy-get(flow, $grid)));\n  }\n\n  @return $_return;\n}\n\n\n// Get Debug\n// ---------\n// Return the value of a debug setting\n// - $key: <setting>\n@function debug-get(\n  $key,\n  $grid: $susy\n) {\n  $key: join(debug, $key, space);\n  @return susy-get($key, $grid);\n}\n","// Background Properties\n// =====================\n\n// Susy Background Image\n// ---------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-image>\n@mixin susy-background-image(\n  $image\n) {\n  @if susy-support(background-image, (mixin: background-image), $warn: false) {\n    @include background-image($image...);\n  } @else {\n    background-image: $image;\n  }\n}\n\n// Susy Background Size\n// ---------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-size>\n@mixin susy-background-size(\n  $size\n) {\n  @if susy-support(background-options, (mixin: background-size)) {\n    @include background-size($size);\n  } @else {\n    background-size: $size;\n  }\n}\n\n// Susy Background Origin\n// ----------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-origin>\n@mixin susy-background-origin(\n  $origin\n) {\n  @if susy-support(background-options, (mixin: background-origin)) {\n    @include background-origin($origin);\n  } @else {\n    background-origin: $origin;\n  }\n}\n\n// Susy Background Clip\n// --------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-clip>\n@mixin susy-background-clip(\n  $clip\n) {\n  @if susy-support(background-options, (mixin: background-clip)) {\n    @include background-clip($clip);\n  } @else {\n    background-clip: $clip;\n  }\n}\n","//\n// Variables\n//\n// You can override the default values by setting the variables in your Sass\n// before importing the normalize-scss library.\n\n// The font size set on the root html element.\n$base-font-size: 16px !default;\n\n// The base line height determines the basic unit of vertical rhythm.\n$base-line-height: 24px !default;\n\n// The length unit in which to output vertical rhythm values.\n// Supported values: px, em, rem.\n$base-unit: 'em' !default;\n\n// The default font family.\n$base-font-family: sans-serif !default;\n\n// The font sizes for h1-h6.\n$h1-font-size: 2    * $base-font-size !default;\n$h2-font-size: 1.5  * $base-font-size !default;\n$h3-font-size: 1.17 * $base-font-size !default;\n$h4-font-size: 1    * $base-font-size !default;\n$h5-font-size: 0.83 * $base-font-size !default;\n$h6-font-size: 0.67 * $base-font-size !default;\n\n// The amount lists and blockquotes are indented.\n$indent-amount: 40px !default;\n\n// The following variable controls whether normalize-scss will output\n// font-sizes, line-heights and block-level top/bottom margins that form a basic\n// vertical rhythm on the page, which differs from the original Normalize.css.\n// However, changing any of the variables above will cause\n// $normalize-vertical-rhythm to be automatically set to true.\n$normalize-vertical-rhythm: false !default;\n","// Grid Background API\n// ===================\n// - Sub-pixel rounding can lead to several pixels variation between browsers.\n\n// Grid Background Output\n// ----------------------\n// - $image: background-image\n// - $size: background-size\n// - $clip: background-clip\n// - [$flow]: ltr | rtl\n@mixin background-grid-output (\n  $image,\n  $size: null,\n  $clip: null,\n  $flow: map-get($susy-defaults, flow)\n) {\n  $output: (\n    background-image: $image,\n    background-size: $size,\n    background-origin: $clip,\n    background-clip: $clip,\n    background-position: from($flow) top,\n  );\n\n  @include output($output);\n}\n","// --------------------------------------------------------------------\n// Juice v1.0.0\n// --------------------------------------------------------------------\n@charset \"UTF-8\";\n\n\n\n// --------------------------------------------------------------------\n// Variable settings\n// --------------------------------------------------------------------\n\n// CSS cubic-bezier timing functions.\n// Credit: http://github.com/jaukia/easie\n// EASE IN\n$ease-in-quad:      cubic-bezier(0.550,  0.085, 0.680, 0.530);\n$ease-in-cubic:     cubic-bezier(0.550,  0.055, 0.675, 0.190);\n$ease-in-quart:     cubic-bezier(0.895,  0.030, 0.685, 0.220);\n$ease-in-quint:     cubic-bezier(0.755,  0.050, 0.855, 0.060);\n$ease-in-sine:      cubic-bezier(0.470,  0.000, 0.745, 0.715);\n$ease-in-expo:      cubic-bezier(0.950,  0.050, 0.795, 0.035);\n$ease-in-circ:      cubic-bezier(0.600,  0.040, 0.980, 0.335);\n$ease-in-back:      cubic-bezier(0.600, -0.280, 0.735, 0.045);\n// EASE OUT\n$ease-out-quad:     cubic-bezier(0.250,  0.460, 0.450, 0.940);\n$ease-out-cubic:    cubic-bezier(0.215,  0.610, 0.355, 1.000);\n$ease-out-quart:    cubic-bezier(0.165,  0.840, 0.440, 1.000);\n$ease-out-quint:    cubic-bezier(0.230,  1.000, 0.320, 1.000);\n$ease-out-sine:     cubic-bezier(0.390,  0.575, 0.565, 1.000);\n$ease-out-expo:     cubic-bezier(0.190,  1.000, 0.220, 1.000);\n$ease-out-circ:     cubic-bezier(0.075,  0.820, 0.165, 1.000);\n$ease-out-back:     cubic-bezier(0.175,  0.885, 0.320, 1.275);\n// EASE IN OUT\n$ease-in-out-quad:  cubic-bezier(0.455,  0.030, 0.515, 0.955);\n$ease-in-out-cubic: cubic-bezier(0.645,  0.045, 0.355, 1.000);\n$ease-in-out-quart: cubic-bezier(0.770,  0.000, 0.175, 1.000);\n$ease-in-out-quint: cubic-bezier(0.860,  0.000, 0.070, 1.000);\n$ease-in-out-sine:  cubic-bezier(0.445,  0.050, 0.550, 0.950);\n$ease-in-out-expo:  cubic-bezier(1.000,  0.000, 0.000, 1.000);\n$ease-in-out-circ:  cubic-bezier(0.785,  0.135, 0.150, 0.860);\n$ease-in-out-back:  cubic-bezier(0.680, -0.550, 0.265, 1.550);\n\n// Base px\n$base-px-default: 16px !default;\n$browser-prefixes: false !default;\n\n// Prefix mixin if needed\n// Credit: http://bourbon.io/docs/#prefixer\n@mixin juice-prefixer($property, $value, $prefixes) {\n\t@each $prefix in $prefixes {\n\t\t@if $prefix == webkit {\n\t\t\t-webkit-#{$property}: #{$value};\n\t\t}\n\t\t@else if $prefix == moz {\n\t\t\t-moz-#{$property}: #{$value};\n\t\t}\n\t\t@else if $prefix == ms {\n\t\t\t-ms-#{$property}: #{$value};\n\t\t}\n\t\t@else if $prefix == o {\n\t\t\t-o-#{$property}: #{$value};\n\t\t}\n\t\t@else if $prefix == spec {\n\t\t\t#{$property}: #{$value};\n\t\t}\n\t\t@else  {\n\t\t\t@warn \"Unrecognized prefix: #{$prefix}\";\n\t\t}\n\t}\n}\n\n// Strip the units from a value\n// ----------------------------\n@function strip-units($value) {\n\t@return $value / ($value * 0 + 1);\n}\n\n// Calculate rems from a px value\n// ------------------------------\n@function rem-calc($px, $base-val: $base-px-default) {\n\t@if not unitless($px) {\n\t\t$px: strip-units($px);\n\t}\n\t@if not unitless($base-val) {\n\t\t$base-val: strip-units($base-val);\n\t}\n\t@return ($px / $base-val) * 1rem;\n}\n\n// Calculate ems from a px value\n// ------------------------------\n@function em-calc($px, $base-val: $base-px-default) {\n\t@if not unitless($px) {\n\t\t$px: strip-units($px);\n\t}\n\t@if not unitless($base-val) {\n\t\t$base-val: strip-units($base-val);\n\t}\n\t@return ($px / $base-val) * 1em;\n}\n\n// Breakpoints\n$onepx: em-calc(1) !default;\n$hdpi-ratio-default: 1.3 !default;\n$breakpoint-xlarge-default: em-calc(1920) !default;\n$breakpoint-large-default: em-calc(1440) !default;\n$breakpoint-medium-default: em-calc(1024) !default;\n$breakpoint-small-default: em-calc(640) !default;\n$breakpoint-xsmall-default: em-calc(480) !default;\n$breakpoint-xxsmall-default: em-calc(320) !default;\n// Show/Hide\n$show-display-default: block !default;\n// Border Radius\n$border-radius-default: 5px !default;\n// Placeholder Color\n$placeholder-color-default: #555555 !default;\n// Triangle\n$triangle-direction-default: right !default;\n$triangle-size-default: $base-px-default !default;\n$triangle-color-default: #222222 !default;\n$triangle-element-default: after !default;\n// Circle\n$circle-size-default: $base-px-default !default;\n$circle-color-default: inherit !default;\n$circle-border-width-default: null !default;\n$circle-border-color-default: #222222 !default;\n$circle-display-default: inline-block !default;\n// Square\n$square-size-default: $base-px-default !default;\n$square-color-default: black !default;\n$square-border-width-default: null !default;\n$square-border-color-default: grey !default;\n$square-element-default: before !default;\n// Position\n$position-default: null !default;\n// Tint/Shade\n$mix-percent-default: 15% !default;\n\n\n\n\n// --------------------------------------------------------------------\n// Mixins\n// --------------------------------------------------------------------\n\n// Breakpoints\n// Inspiration: http://www.sitepoint.com/managing-responsive-breakpoints-sass/\n// ---------------------------------------------------------------------------\n$breakpoints: (\n\t\"xxlarge\":\t\"(min-width: #{$breakpoint-xlarge-default + $onepx})\",\n\t\"xlarge-only\":\t\"(min-width: #{$breakpoint-large-default + $onepx}) and (max-width: #{$breakpoint-xlarge-default})\",\n\t\"xlarge-up\":\t\"(min-width: #{$breakpoint-large-default + $onepx})\",\n\t\"xlarge\":\t\"(max-width: #{$breakpoint-xlarge-default})\",\n\t\"large-only\":\t\"(min-width: #{$breakpoint-medium-default + $onepx}) and (max-width: #{$breakpoint-large-default})\",\n\t\"large-up\":\t\"(min-width: #{$breakpoint-medium-default + $onepx})\",\n\t\"large\":\t\"(max-width: #{$breakpoint-large-default})\",\n\t\"medium-only\":\t\"(min-width: #{$breakpoint-small-default + $onepx}) and (max-width: #{$breakpoint-medium-default})\",\n\t\"medium-up\":\t\"(min-width: #{$breakpoint-small-default + $onepx})\",\n\t\"medium\":\t\"(max-width: #{$breakpoint-medium-default})\",\n\t\"small-only\":\t\"(min-width: #{$breakpoint-xsmall-default + $onepx}) and (max-width: #{$breakpoint-small-default})\",\n\t\"small-up\":\t\"(min-width: #{$breakpoint-xsmall-default + $onepx})\",\n\t\"small\":\t\"(max-width: #{$breakpoint-small-default})\",\n\t\"xsmall-only\":\t\"(min-width: #{$breakpoint-xxsmall-default + $onepx}) and (max-width: #{$breakpoint-xsmall-default})\",\n\t\"xsmall-up\":\t\"(min-width: #{$breakpoint-xxsmall-default + $onepx})\",\n\t\"xsmall\":\t\"(max-width: #{$breakpoint-xsmall-default})\",\n\t\"xxsmall\":\t\"(max-width: #{$breakpoint-xxsmall-default})\",\n\t\"iphone3\":\t\"(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 1)\",\n\t\"iphone3-landscape\":\t\"(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 1) and (orientation: landscape)\",\n\t\"iphone3-portrait\":\t\"(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 1) and (orientation: portrait)\",\n\t\"iphone4\":\t\"(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 2/3)\",\n\t\"iphone4-landscape\":\t\"(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 2/3) and (orientation: landscape)\",\n\t\"iphone4-portrait\":\t\"(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 2/3) and (orientation: portrait)\",\n\t\"iphone5\":\t\"(min-device-width: 320px) and (max-device-width: 568px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 40/71)\",\n\t\"iphone5-landscape\":\t\"(min-device-width: 320px) and (max-device-width: 568px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 40/71) and (orientation: landscape)\",\n\t\"iphone5-portrait\":\t\"(min-device-width: 320px) and (max-device-width: 568px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 40/71) and (orientation: portrait)\",\n\t\"iphone6\":\t\"(min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2)\",\n\t\"iphone6-landscape\":\t\"(min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\",\n\t\"iphone6-portrait\":\t\"(min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\",\n\t\"iphone6-plus\":\t\"(min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3)\",\n\t\"iphone6-plus-landscape\":\t\"(min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\",\n\t\"iphone6-plus-portrait\":\t\"(min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\",\n\t\"ipad\":\t\"(min-device-width: 768px) and (max-device-width: 1024px)\",\n\t\"ipad-landscape\":\t\"(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape)\",\n\t\"ipad-portrait\":\t\"(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait)\",\n\t\"ipad-retina\":\t\"(min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-device-pixel-ratio: 2)\",\n\t\"ipad-retina-landscape\":\t\"(min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\",\n\t\"ipad-retina-portrait\":\t\"(min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\",\n\t\"hdpi\":\t\"(-webkit-min-device-pixel-ratio: $hdpi-ratio-default), only screen and (min--moz-device-pixel-ratio: $hdpi-ratio-default), only screen and (-moz-min-device-pixel-ratio: $hdpi-ratio-default),\tonly screen and (-o-min-device-pixel-ratio: #{$hdpi-ratio-default}/1), only screen and (min-resolution: #{round($hdpi-ratio-default*96)}dpi), only screen and (min-resolution: #{$hdpi-ratio-default}dppx)\"\n);\n@mixin bp($break, $viewport1: null) {\n\t// preset breakpoint\n\t@if not $viewport1 {\n\t\t@if map-has-key($breakpoints, $break) {\n\t\t\t@media only screen and #{map-get($breakpoints, $break)} { @content; }\n\t\t}\n\t\t@else {\n\t\t\t@warn \"Couldn't find a breakpoint named #{$break}.\";\n\t\t}\n\t}\n\t@else {\n\t\t// min breakpoint\n\t\t@if $break == min {\n\t\t\t@media screen and (min-width: $viewport1) { @content; }\n\t\t}\n\t\t// max breakpoint\n\t\t@else if $break == max {\n\t\t\t@media screen and (max-width: $viewport1) { @content; }\n\t\t}\n\t\t// min & max breakpoint\n\t\t@else {\n\t\t\t@media screen and (min-width: $break) and (max-width: $viewport1) { @content; }\n\t\t}\n\t}\n}\n\n// Show/Hide Element\n// -----------------\n@mixin show($breakpoint: null, $display: $show-display-default) {\n\t@if $breakpoint {\n\t\tdisplay: none;\n\t\t@include bp($breakpoint) {\n\t\t\tdisplay: $display;\n\t\t}\n\t} @else {\n\t\tdisplay: $display;\n\t}\n}\n@mixin hide($breakpoint: null) {\n\t@if $breakpoint {\n\t\t@include bp($breakpoint) {\n\t\t\tdisplay: none !important;\n\t\t}\n\t} @else {\n\t\tdisplay: none !important;\n\t}\n}\n\n\n// Single side border radius\n// -------------------------\n@mixin border-top-radius($radius: $border-radius-default) {\n\tborder-top-right-radius: $radius;\n\tborder-top-left-radius: $radius;\n}\n@mixin border-right-radius($radius: $border-radius-default) {\n\tborder-top-right-radius: $radius;\n\tborder-bottom-right-radius: $radius;\n}\n@mixin border-bottom-radius($radius: $border-radius-default) {\n\tborder-bottom-right-radius: $radius;\n\tborder-bottom-left-radius: $radius;\n}\n@mixin border-left-radius($radius: $border-radius-default) {\n\tborder-top-left-radius: $radius;\n\tborder-bottom-left-radius: $radius;\n}\n\n// Transforms\n// ----------\n@mixin transform-single($property, $value) {\n\t@if $browser-prefixes {\n\t\t@include juice-prefixer(transform, #{$property}unquote(\"(\")#{$value}unquote(\")\"), webkit moz ms o spec);\n\t}\n\t@else {\n\t\ttransform: #{$property}unquote(\"(\")#{$value}unquote(\")\");\n\t}\n}\n@mixin rotate($deg) {\n\t@include transform-single(rotate, $deg);\n}\n@mixin rotateX($deg) {\n\t@include transform-single(rotateX, $deg);\n}\n@mixin rotateY($deg) {\n\t@include transform-single(rotateY, $deg);\n}\n@mixin rotateZ($deg) {\n\t@include transform-single(rotateZ, $deg);\n}\n@mixin rotate3d($x, $y, $z, $deg) {\n\t$multi-var: $x, $y, $z, $deg;\n\t@include transform-single(rotate3d, $multi-var);\n}\n@mixin scale($ratio) {\n\t@include transform-single(scale, $ratio);\n}\n@mixin scaleX($ratio) {\n\t@include transform-single(scaleX, $ratio);\n}\n@mixin scaleY($ratio) {\n\t@include transform-single(scaleY, $ratio);\n}\n@mixin scaleZ($ratio) {\n\t@include transform-single(scaleZ, $ratio);\n}\n@mixin scale3d($x, $y, $z) {\n\t$multi-var: $x, $y, $z;\n\t@include transform-single(scale3d, $multi-var);\n}\n@mixin skew($x, $y) {\n\t$multi-var: $x, $y;\n\t@include transform-single(skew, $multi-var);\n\tbackface-visibility: hidden;\n}\n@mixin skewX($deg) {\n\t@include transform-single(skewX, $deg);\n\tbackface-visibility: hidden;\n}\n@mixin skewY($deg) {\n\t@include transform-single(skewY, $deg);\n\tbackface-visibility: hidden;\n}\n@mixin translate($x, $y) {\n\t$multi-var: $x, $y;\n\t@include transform-single(translate, $multi-var);\n}\n@mixin translateX($x) {\n\t@include transform-single(translateX, $x);\n}\n@mixin translateY($y) {\n\t@include transform-single(translateY, $y);\n}\n@mixin translateZ($z) {\n\t@include transform-single(translateZ, $z);\n}\n@mixin translate3d($x, $y, $z) {\n\t$multi-var: $x, $y, $z;\n\t@include transform-single(translate3d, $multi-var);\n}\n\n// Emboss effect\n// -------------\n@mixin box-emboss($opacity: 0.5, $opacity2: 0.5){\n\t@if $browser-prefixes {\n\t\t@include juice-prefixer(box-shadow, \"rgba(white,#{$opacity}) 0 1px 0, inset rgba(black,#{$opacity2}) 0 1px 0\", webkit spec);\n\t}\n\t@else {\n\t\tbox-shadow: rgba(white,$opacity) 0 1px 0, inset rgba(black,$opacity2) 0 1px 0;\n\t}\n}\n\n// Letterpress effect\n// ------------------\n@mixin letterpress($opacity: 0.5){\n\ttext-shadow: rgba(white,$opacity) 0 1px 0;\n}\n\n// Placeholder text\n// ----------------\n@mixin placeholder-color($color: $placeholder-color-default) {\n\t@if $browser-prefixes {\n\t\t&::-webkit-input-placeholder {\n\t\t\tcolor: $color;\n\t\t}\n\t\t&::-moz-placeholder {\n\t\t\tcolor: $color;\n\t\t}\n\t\t&::-ms-input-placeholder {\n\t\t\tcolor: $color;\n\t\t}\n\t\t&::placeholder {\n\t\t\tcolor: $color;\n\t\t}\n\t}\n\t@else {\n\t\t&::placeholder {\n\t\t\tcolor: $color;\n\t\t}\n\t}\n}\n\n// Sizing\n// ------\n@mixin size($width, $height: $width) {\n\twidth: $width;\n\theight: $height;\n}\n\n// Normal & hover state\n// --------------------\n@mixin hoverer($property, $normal, $hovered) {\n\t#{$property}: $normal;\n\t&:hover {\n\t\t#{$property}: $hovered;\n\t}\n}\n\n// Add responsive styling for multiple breakpoints\n// -----------------------------------------------\n@mixin responsive($property, $base, $medium:false, $small:false) {\n\t#{$property}: $base;\n\t@if $medium {\n\t\t@include bp(medium) {\n\t\t\t#{$property}: $medium;\n\t\t}\n\t}\n\t@if $small {\n\t\t@include bp(small) {\n\t\t\t#{$property}: $small;\n\t\t}\n\t}\n}\n\n// Create a triangle using borders\n// -------------------------------\n@mixin triangle($direction: $triangle-direction-default,\n\t\t\t\t\t\t\t\t$size: $triangle-size-default,\n\t\t\t\t\t\t\t\t$color: $triangle-color-default,\n\t\t\t\t\t\t\t\t$center: false,\n\t\t\t\t\t\t\t\t$element: $triangle-element-default) {\n\t&:#{$element} {\n\t\t@if not $center {\n\t\t\tposition: absolute;\n\t\t}\n\t\tcontent:'';\n\t\t@include size(0);\n\t\t-webkit-transform: rotate(360deg);\n\t\tborder-style: solid;\n\t\t@if $direction == up {\n\t\t\tborder-width: 0 $size ($size*1.625) $size;\n\t\t\tborder-color: transparent transparent $color transparent;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(null,null,100%,50%);\n\t\t\t\t@if $browser-prefixes {\n\t\t\t\t\t@include juice-prefixer(transform, translateX(-$size), webkit moz ms o spec);\n\t\t\t\t}\n\t\t\t\t@else {\n\t\t\t\t\ttransform: translateX(-$size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t@else if $direction == up-right {\n\t\t\tborder-width: 0 $size $size 0;\n\t\t\tborder-color: transparent $color transparent transparent;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(0,0);\n\t\t\t}\n\t\t}\n\t\t@else if $direction == right {\n\t\t\tborder-width: $size 0 $size ($size*1.625);\n\t\t\tborder-color: transparent transparent transparent $color;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(50%,null,null,100%);\n\t\t\t\t@if $browser-prefixes {\n\t\t\t\t\t@include juice-prefixer(transform, translateY(-$size), webkit moz ms o spec);\n\t\t\t\t}\n\t\t\t\t@else {\n\t\t\t\t\ttransform: translateY(-$size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t@else if $direction == down-right {\n\t\t\tborder-width: 0 0 $size $size;\n\t\t\tborder-color: transparent transparent $color transparent;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(null,0,0);\n\t\t\t}\n\t\t}\n\t\t@else if $direction == down {\n\t\t\tborder-width: ($size*1.625) $size 0 $size;\n\t\t\tborder-color: $color transparent transparent transparent;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(100%,null,null,50%);\n\t\t\t\t@if $browser-prefixes {\n\t\t\t\t\t@include juice-prefixer(transform, translateX(-$size), webkit moz ms o spec);\n\t\t\t\t}\n\t\t\t\t@else {\n\t\t\t\t\ttransform: translateX(-$size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t@else if $direction == down-left {\n\t\t\tborder-width: $size 0 0 $size;\n\t\t\tborder-color: transparent transparent transparent $color;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(null,null,0,0);\n\t\t\t}\n\t\t}\n\t\t@else if $direction == left {\n\t\t\tborder-width: $size ($size*1.625) $size 0;\n\t\t\tborder-color: transparent $color transparent transparent;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(50%,100%);\n\t\t\t\t@if $browser-prefixes {\n\t\t\t\t\t@include juice-prefixer(transform, translateY(-$size), webkit moz ms o spec);\n\t\t\t\t}\n\t\t\t\t@else {\n\t\t\t\t\ttransform: translateY(-$size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t@else if $direction == up-left {\n\t\t\tborder-width: $size $size 0 0;\n\t\t\tborder-color: $color transparent transparent transparent;\n\t\t\t@if $center {\n\t\t\t\t@include absolute(0,null,null,0);\n\t\t\t}\n\t\t}\n\t\t@else {\n\t\t\t@warn \"Available directions: up, up-right, right, down-right, down, down-left, left, up-left.\";\n\t\t}\n\t\t@content;\n\t}\n}\n\n// Create a circle, with an optional border\n// ----------------------------------------\n@mixin circle($size: $circle-size-default,\n\t\t\t\t\t\t$color: $circle-color-default,\n\t\t\t\t\t\t$border-width: $circle-border-width-default,\n\t\t\t\t\t\t$border-color: $circle-border-color-default,\n\t\t\t\t\t\t$display: $circle-display-default) {\n\tdisplay: $display;\n\tborder-radius: 50%;\n\t@if $border-width {\n\t\t@include size($size);\n\t\tbackground-color: $color;\n\t\tborder: $border-width solid $border-color;\n\t}\n\t@else{\n\t\t@if $color == inherit {\n\t\t\t@include size(0);\n\t\t\tborder-width: $size/2;\n\t\t\tborder-style: solid;\n\t\t}\n\t\t@else {\n\t\t\t@include size($size);\n\t\t\tbackground-color: $color;\n\t\t}\n\t}\n}\n\n// Create a psuedo element square, with an optional border\n// -------------------------------------------------------\n@mixin square($size: $square-size-default,\n\t\t\t\t\t\t$color: $square-color-default,\n\t\t\t\t\t\t$border-width: $square-border-width-default,\n\t\t\t\t\t\t$border-color: $square-border-color-default,\n\t\t\t\t\t\t$element: $square-element-default) {\n\t&:#{$element} {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\t@include size($size);\n\t\tbackground: $color;\n\t\t@if $border-width {\n\t\t\tborder: $border-width solid $border-color;\n\t\t}\n\t}\n}\n\n// Advanced positioning\n// --------------------\n@mixin position($type,\n\t\t\t\t\t\t\t\t$top: $position-default,\n\t\t\t\t\t\t\t\t$right: $position-default,\n\t\t\t\t\t\t\t\t$bottom: $position-default,\n\t\t\t\t\t\t\t\t$left: $position-default) {\n\tposition: $type;\n\t$allowed_types: absolute relative fixed;\n\t@if not index($allowed_types, $type) {\n\t\t@warn \"Unknown position: #{$type}.\";\n\t}\n\t@each $data in top $top, right $right, bottom $bottom, left $left {\n\t\t#{nth($data, 1)}: nth($data, 2);\n\t}\n}\n@mixin absolute($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {\n\t@include position(absolute, $top, $right, $bottom, $left);\n}\n@mixin relative($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {\n\t@include position(relative, $top, $right, $bottom, $left);\n}\n@mixin fixed($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {\n\t@include position(fixed, $top, $right, $bottom, $left);\n}\n\n// Easily set an element's \"trbl\" values\n// -------------------------------------\n@mixin trbl($top: $position-default,\n\t\t\t\t\t\t\t\t$right: $position-default,\n\t\t\t\t\t\t\t\t$bottom: $position-default,\n\t\t\t\t\t\t\t\t$left: $position-default) {\n\t@each $data in top $top, right $right, bottom $bottom, left $left {\n\t\t#{nth($data, 1)}: nth($data, 2);\n\t}\n}\n@mixin top-left {\n\t@include trbl(0,null,null,0);\n}\n@mixin top-right {\n\t@include trbl(0,0);\n}\n@mixin bottom-left {\n\t@include trbl(null,null,0,0);\n}\n@mixin bottom-right {\n\t@include trbl(null,0,0,null);\n}\n\n// Preload Images\n// Credit: http://codepen.io/pixelass/details/vEKZRq\n// -------------------------------------------------\n@mixin image-preload($preload: run) {\n\t@if not variable-exists(_preload-image-list) {\n\t\t$_preload-image-list: ()!global;\n\t}\n\t@if not variable-exists(_preload-image-urls) {\n\t\t$_preload-image-urls: ()!global;\n\t}\n\t@if not variable-exists(_preload-images-loaded) {\n\t\t$_preload-images-loaded: false!global;\n\t}\n\t@if $preload == run and not $_preload-images-loaded {\n\t\t$_preload-images-loaded: true!global;\n\t\thtml:after {\n\t\t\tcontent: '';\n\t\t\tdisplay: none;\n\t\t\tbackground-image: $_preload-image-urls;\n\t\t}\n\t} @else {\n\t\t$_preload-image-list: join($preload, $_preload-image-list)!global;\n\t\t$image-urls: ();\n\t\t@if length($_preload-image-list) > 0 {\n\t\t\t@for $i from 1 through length($_preload-image-list) {\n\t\t\t\t$image-urls: join(url(#{nth($_preload-image-list,$i)}), $image-urls);\n\t\t\t}\n\t\t\t$result: ();\n\t\t\t@each $item in $image-urls {\n\t\t\t\t@if not index($result, $item) {\n\t\t\t\t\t\t$result: append($result, $item, comma);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$_preload-image-urls: $result!global;\n\t\t}\n\t}\n}\n\n// --------------------------------------------------------------------\n// Helper Mixins\n// --------------------------------------------------------------------\n\n// Clearfix\n// --------\n@mixin clearfix {\n\t*zoom: 1;\n\t&:before,\n\t&:after {\n\t\tdisplay: table;\n\t\tcontent:'';\n\t\tline-height: 0;\n\t}\n\t&:after {\n\t\tclear: both;\n\t}\n}\n\n// Hide text\n// ---------\n@mixin hide-text {\n\tfont: 0/0 a;\n\tcolor: transparent;\n\ttext-shadow: none;\n}\n\n// Center an element vertically and horizontally\n// ---------------------------------------------\n@mixin centerer {\n\t@include absolute(50%,null,null,50%);\n\t@if $browser-prefixes {\n\t\t@include juice-prefixer(transform, translate(-50%,-50%), webkit moz ms o spec);\n\t}\n\t@else {\n\t\ttransform: translate(-50%,-50%);\n\t}\n}\n\n// Center an element vertically\n// ----------------------------\n@mixin vert-centerer {\n\t@include relative(50%);\n\t@if $browser-prefixes {\n\t\t@include juice-prefixer(transform, translateY(-50%), webkit moz ms o spec);\n\t}\n\t@else {\n\t\ttransform: translateY(-50%);\n\t}\n}\n\n// Cover everything\n// ----------------\n@mixin coverer {\n\t@include absolute(0, null, null, 0);\n\t@include size(100%);\n}\n\n// Center a block level element\n// ----------------------------\n@mixin center-block {\n\tdisplay: block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n}\n\n// Clean an element\n// ----------------\n@mixin clean {\n\tmargin: 0;\n\tpadding: 0;\n}\n\n// ----------------------------------\n// Functions\n// ----------------------------------\n\n// Mix white with another color\n// ----------------------------\n@function tint($color, $percent: $mix-percent-default){\n\t@return mix(white, $color, $percent);\n}\n\n// Mix black with another color\n// ----------------------------\n@function shade($color, $percent: $mix-percent-default){\n\t@return mix(black, $color, $percent);\n}\n\n// Create a random color\n// ---------------------\n@function random-color($min: 0, $max: 255, $alpha: 1) {\n\t@if $min < 0 {\n\t\t$min: -1;\n\t} @else {\n\t\t$min: $min - 1;\n\t}\n\t@if $max > 255 {\n\t\t$max: 256;\n\t} @else {\n\t\t$max: $max + 1;\n\t}\n\t$red: random($max) + $min;\n\t$green: random($max) + $min;\n\t$blue: random($max) + $min;\n\t@return rgba($red, $green, $blue, $alpha);\n}\n\n// Reverse a string\n// Credit: https://coderwall.com/p/rhu_uw/sass-str-reverse-function\n// ----------------\n@function reverse($string) {\n\t$reversed-string: '';\n\t@for $i from 1 through str-length($string) {\n\t\t$char: str-slice($string, $i, $i);\n\t\t$reversed-string: \"#{$char}#{$reversed-string}\";\n\t}\n\t@return #{$reversed-string};\n}\n",".ham-btn {\n  & > button {\n    padding: 1em .75em;\n    border: none;\n    outline: none;\n    background-color: inherit;\n  }\n}\n\n@include susy-breakpoint($b-medium,12) {\n  .ham-btn {\n    display: none;\n  }\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n",".logo {\n\t@include span(5);\n\t\tbackground-color: $primary-transparent-color;\n\t\theight: rem-calc(260px);\n\t\t& img {\n\t\t\tmargin: 0 auto;\n\t\t}\n\t\t& .main-logo {\n\t\t\tmargin-top: rem-calc(90px);\n\t\t\t@include span(10);\n\t\t\t@include pre(1);\n\t\t}\n\t\t& .sub-logo {\n\t\t\t@include span(8);\n\t\t\t@include pre(2);\n\t\t\tmargin-top: 2rem;\n\t\t}\n}","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n",".header-nav {\n  list-style: none;\n  width: span(3.5);\n  margin-top: 2rem;\n  & li {\n    position: relative;\n  }\n  & li::before {\n    content: \"•\";\n    position: absolute;\n    color: $primary-color;\n    font-size: 2rem;\n    line-height: 1.4;\n  }\n  & li a {\n    display: block;\n    padding: rem-calc(9px) rem-calc(20px);\n    text-transform: uppercase;\n    background-color: $white;\n    color: $black;\n    &:hover {\n      background-color: $primary-color;\n      color: $white;\n      text-decoration: none;\n      padding-left: rem-calc(25px);\n      font-weight: bold;\n    }\n    transition: all .2s ease-in-out;\n  }\n}\n\n.hor-nav {\n  text-align: center;\n  &__link {\n    font-family: $second-font-family;\n    display: inline-block;\n    font-weight: 700;\n    padding: 2em 1em 0 2em;\n    color: $fifth-color;\n    font-size: .9em;\n    &:hover,\n    &:active,\n    &:focus {\n      color: darken($fifth-color,3%);\n      text-decoration: underline;\n      cursor: pointer;\n    }\n    &:last-child {\n      padding-right: 0;\n    }\n  }\n}\n",".contacts {\n  @include span(7 last);\n  margin-top: 5rem;\n  & a {\n    color: $black;\n  }\n}\n\n.top-contacts {\n  & a {\n    line-height: 3;  \n    padding-right: 1rem;\n    padding-left: 2rem;\n  }\n  & .phone::before {\n    content: \"\";\n    display: inline-block;\n    width: rem-calc(13px);\n    height: rem-calc(10px);\n    margin-right: rem-calc(10px);\n    background-image: url(\"../img/assets/icons/phone.svg\");\n    background-repeat: no-repeat;\n    background-position: 0 -1px;\n  }\n  & .email::before {\n    content: \"\";\n    display: inline-block;\n    width: rem-calc(13px);\n    height: rem-calc(10px);\n    margin-right: rem-calc(10px);\n    background-image: url(\"../img/assets/icons/envelop.svg\");\n    background-repeat: no-repeat;\n\n  }\n  & .address::before {\n    content: \"\";\n    display: inline-block;\n    width: rem-calc(13px);\n    height: rem-calc(16px);\n    margin-right: rem-calc(10px);\n    background-image: url(\"../img/assets/icons/point.svg\");\n    background-repeat: no-repeat;\n\n  }\n}\n\n.hor-contacts {\n  text-align: center;\n  line-height: 3.5;\n  background-color: white;\n  box-shadow: 0 0 5px rgba(0,0,0,.5);\n  & a {\n    display: inline-block;\n    color: $primary-color;\n    font-weight: bold;\n    padding: 0 2em;\n    font-size: .9em;\n  }\n}",".container {\n  @include container($container-width);\n}\n\n.cat-card {\n  @include span(1 of 1);\n  position: relative;\n  overflow: hidden;\n  margin-bottom: gutter(12);\n  border: solid rem-calc(5px) $light-gray;\n  &:last-child {\n    margin-bottom: 0;\n  }\n  height: 10rem;\n  background-color: $light-gray;\n  color: $black;\n  &:hover {\n    background-color: $white;\n    color: $primary-color;\n  }\n  transition: all .2s ease-in-out;\n}\n\n.cat-card__text {\n  & p:first-child {\n    font-size: 1.75rem;\n    font-family: $second-font-family;\n    margin: 0 auto;\n  }\n  position: absolute;\n  margin: 0 2em;\n  top: 1rem;\n}\n\n.cat-card__img {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n@include susy-breakpoint($b-medium) {\n  .cat-card {\n    height: 21.875rem;\n    @include gallery(6 of 12);\n  }\n  .cat-card__text {\n    top: 7rem;\n  }\n}\n\n@include susy-breakpoint($b-large) {\n  .cat-card {\n    @include gallery(4 of 12);\n  }\n}\n\n\n\n\n","// Isolation Syntax\n// ================\n\n\n// Isolate [Mixin]\n// ---------------\n// Set isolation as an override.\n// - $location: <span>\n@mixin isolate(\n  $isolate: 1\n) {\n  $inspect: $isolate;\n\n  $output: (\n    push: isolate($isolate),\n    flow: susy-get(flow, $isolate),\n  );\n\n  @include susy-inspect(isolate, $inspect);\n  @include isolate-output($output...);\n}\n\n\n// Isolate [function]\n// ------------------\n// Return an isolation offset width.\n// - $location: <span>\n@function isolate(\n  $isolate: 1\n) {\n  $isolate: parse-span($isolate);\n  $isolation: susy-get(span, $isolate);\n\n  @if $isolation and not(get-location($isolate)) {\n    $new: (\n      span: null,\n      location: $isolation,\n    );\n    $isolate: map-merge($isolate, $new);\n  }\n\n  @return get-isolation($isolate);\n}\n\n\n// Get Isolation\n// -------------\n// Return the isolation offset width\n// - $input: <map>\n@function get-isolation(\n  $input\n) {\n  $location   : get-location($input);\n  $columns    : susy-get(columns, $input);\n  $width      : null;\n\n  @if type-of($location) == number and not(unitless($location)) {\n    $width: $location;\n  } @else if $location {\n    $push: $location - 1;\n    @if $push > 0 {\n      $push: map-merge($input, (\n        span: $push,\n        location: 1,\n        spread: wide,\n      ));\n      $width: get-span-width($push);\n    }\n  }\n\n  @if susy-get(gutter-position, $input) == split\n      and susy-get(gutters, $input) > 0 {\n    $width: if($width == null, gutters($input), $width + gutters($input));\n  }\n\n  @return $width or 0;\n}\n","// Gallery Syntax\n// ==============\n\n// Gallery\n// -------\n// Create an isolated gallery\n// - $span        : <span>\n// - [$selector]  : child | of-type\n@mixin gallery(\n  $span,\n  $selector: child\n) {\n  $inspect    : $span;\n  $span       : parse-span($span);\n  $span       : map-merge($span, (location: 1));\n\n  $n            : susy-get(span, $span);\n  $columns      : susy-get(columns, $span);\n  $context      : susy-count($columns);\n  $flow         : susy-get(flow, $span);\n\n  $inside       : is-inside($span);\n  $from         : from($flow);\n  $line         : floor($context / $n);\n  $symmetrical  : is-symmetrical($columns);\n\n  $output: (\n    width             : null,\n    float             : from,\n    margin-before     : null,\n    margin-after      : null,\n    padding-before    : null,\n    padding-after     : null,\n    flow              : $flow,\n  );\n\n  @if $inside {\n    $gutters: get-gutters($span);\n    $output: map-merge($output, (\n      padding-before: map-get($gutters, before),\n      padding-after: map-get($gutters, after),\n    ));\n  }\n\n  @if $symmetrical {\n    $output: map-merge($output, (width: get-span-width($span)));\n  }\n\n  $box          : susy-get(box-sizing, $span);\n  $global-box   : if(susy-get(global-box-sizing) == 'border-box', true, false);\n\n  @include susy-inspect(gallery, $inspect);\n\n  // Collective Output\n  @if $box == border-box or ($inside and not($box) and not($global-box)) {\n    @include output((box-sizing: border-box));\n  } @else if $box == content-box {\n    @include output((box-sizing: content-box));\n  }\n\n  @include float-span-output($output...);\n\n  // Individual Loop\n  @for $item from 1 through $line {\n    $nth: '#{$line}n + #{$item}';\n    &:nth-#{$selector}(#{$nth}) {\n      // Individual Prep\n      $output: (\n        width             : if($symmetrical, null, get-span-width($span)),\n        float             : null,\n        margin-before     : get-isolation($span),\n        margin-after      : -100%,\n        padding-before    : null,\n        padding-after     : null,\n        flow              : $flow,\n      );\n\n      // Individual Output\n      @include float-span-output($output...);\n\n      @if get-edge($span) == first {\n        @include break;\n        @include first($span);\n      } @else {\n        @include nobreak;\n      }\n\n      // Individual Location Increment\n      $location: get-location($span) + $n;\n      $location: if($location > $context, 1, $location);\n      $span: map-merge($span, (location: $location));\n    }\n  }\n}\n","// Row Start & End\n// ===============\n\n// Break\n// -----\n// Apply to any element that should force a line break.\n@mixin break {\n  @include output((clear: both));\n}\n\n\n// NoBreak\n// -------\n// Cancel the break() effect, e.g. when using media queries.\n@mixin nobreak {\n  @include output((clear: none));\n}\n\n\n// Full\n// ----\n// - [$context]: <layout shorthand>\n@mixin full(\n  $context: $susy\n) {\n  $inspect : $context;\n  @include susy-inspect(full, $inspect);\n  @include span(full of parse-grid($context) break);\n}\n\n\n// First\n// -----\n// - [$context]: <settings>\n@mixin first(\n  $context: $susy\n) {\n  $inspect  : $context;\n  $context  : parse-grid($context);\n  $flow     : susy-get(flow, $context);\n\n  @include susy-inspect(first, $inspect);\n  @if not(is-split($context)) {\n    @include float-first($flow);\n  }\n}\n\n@mixin alpha(\n  $context: $susy\n) {\n  @include first($context);\n}\n\n\n// Last\n// ----\n// - [$context]: <settings>\n@mixin last(\n  $context: $susy\n) {\n  $inspect  : $context;\n  $context  : parse-grid($context);\n\n  @include susy-inspect(last, $inspect);\n\n  $output: (\n    flow: susy-get(flow, $context),\n    last-flow: susy-get(last-flow, $context),\n    margin: if(is-split($context), null, 0),\n  );\n\n  @include float-last($output...);\n}\n\n@mixin omega(\n  $context: $susy\n) {\n  @include last($context);\n}\n\n\n// Get Edge\n// --------\n// Calculate edge value based on location, if possible\n@function get-edge(\n  $span\n) {\n  $span       : parse-span($span);\n  $edge       : susy-get(edge, $span);\n\n  @if not($edge) {\n    $count: susy-count(susy-get(columns, $span));\n    $location: susy-get(location, $span);\n    $n: susy-get(span, $span);\n\n    $number: if(type-of($location) == number, true, false);\n    $index: if($number and unitless($location), true, false);\n\n    @if $n == $count {\n      $edge: full;\n    } @else if $location and $n and $index {\n      @if $location == 1 {\n        $edge: if($n == $count, full, first);\n      } @else if $location + $n - 1 == $count {\n        $edge: last;\n      }\n    }\n  }\n\n  @if $edge == alpha or $edge == omega {\n    $edge: if($edge == alpha, first, last);\n  }\n\n  @return $edge;\n}\n\n\n// Get Location\n// ------------\n// Calculate location value based on edge, if possible\n@function get-location(\n  $span\n) {\n  $span       : parse-span($span);\n  $location   : susy-get(location, $span);\n  $edge       : get-edge($span);\n  $n          : susy-get(span, $span);\n\n  @if $edge and not($location) and type-of($n) == number and unitless($n) {\n    @if $edge == first {\n      $location: 1;\n    } @else if $edge == last {\n      $location: susy-count(susy-get(columns, $span)) - $n + 1;\n    }\n  }\n\n  @return $location\n}\n","// Float Ends API\n// ==============\n\n// Susy End Defaults\n// -----------------\n// - PRIVATE\n@include susy-defaults((\n  last-flow: to,\n));\n\n// Float Last\n// ----------\n// - [$flow]  : ltr | rtl\n@mixin float-last(\n  $flow: map-get($susy-defaults, flow),\n  $last-flow: map-get($susy-defaults, last-flow),\n  $margin: 0\n) {\n  $to: to($flow);\n\n  $output: (\n    float: if($last-flow == to, $to, null),\n    margin-#{$to}: $margin,\n  );\n\n  @include output($output);\n}\n\n// Float First\n// -----------\n// - [$flow]  : ltr | rtl\n@mixin float-first(\n  $flow: map-get($susy-defaults, flow)\n) {\n  $output: (\n    margin-#{from($flow)}: 0,\n  );\n\n  @include output($output);\n}\n","//Form\nfieldset {\n  border:none;\n}\n\ninput {\n  padding: 1em;\n  border: 1px solid $light-gray;\n  border-bottom: 1px solid $primary-color;\n  background-color: lighten($light-gray, 7% );\n  font-size: 1em;\n  &:active, &:focus {\n    background-color: $white;\n  }\n}\n\ntextarea {\n  padding: 10px 15px;\n  border: 1px solid $light-gray;\n  border-bottom: 1px solid $primary-color;\n  background-color: lighten($light-gray, 7% );\n  font-size: 1em;\n  &:active, &:focus {\n    background-color: $white;\n  }\n}\n\nbutton {\n  outline: none;\n}\n\n\n.feedback-form {\n  text-align: center;\n  &__legend {\n    margin: 1em;\n  }\n  &__label {\n    display: block;\n    margin: 1em;\n  }\n  &__input {\n    display: block;\n    margin: 0 auto;\n    width: span(4);\n  }\n  &__textarea{\n    display: block;\n    margin: 0 auto;\n    width: span(4);\n    min-height: 75px;\n  }\n  &__send-btn {\n    display: block;\n    margin: 1em auto;\n  }\n}","button {\n  border: none;\n\n}\n\n.btn {\n  padding: .5em 1em;\n  background-color: $primary-color;\n  font-size: 1em;\n  color: $white;\n}","//actions\n.is-hide {\n  display: none;\n}\n\n.is-show {\n  display: block;\n}\n\n\n// content backgrounds\n\n.is-white-bg {\n  background-color: $white;\n}\n\n.is-light-gray-bg {\n  background-color: $light-gray;\n}\n\n.is-black-bg {\n  background-color: $dark-black;\n}\n\n.is-black-trans {\n  background-color: rgba(0, 0, 0, 1);\n}\n\n.is-dust {\n  background-image: url(\"../img/assets/noise.png\");\n}\n\n.is-light {\n  background-color: $fifth-color;\n}\n\n.is-dark {\n  background-color: $primary-color;\n}\n\n.is-dark-grad {\n  background-color: $primary-color;\n}\n\n.is-hide {\n  display: none;\n}\n\n//text decorations\n.is-accent {\n  font-weight: 700;\n}\n\n.is-text-white {\n  color: $white;\n}\n\n.is-text-center {\n  text-align: center;\n}\n\n\n\n@include susy-breakpoint($b-medium, 12) {\n  .is-black-trans {\n    background-color: rgba(0, 0, 0, .65);\n  }\n\n  .is-dark-grad {\n    background-image: linear-gradient(-45deg, rgb(252, 250, 237) 0%,\n            rgb(252, 250, 237) 10%, rgb(191, 57, 42) 10%, rgb(191, 57, 42) 90%, rgb(252, 250, 237) 90%, rgb(252, 250, 237) 100%);\n  }\n}"]}